USE "SQL_PROJECT";

---TASK 1---

CREATE OR REPLACE TABLE SHOPPING_HISTORY(
PRODUCT VARCHAR2(50),
  QUANTITY NUMBER(10),
  UNIT_PRICE NUMBER(10)
);

SELECT PRODUCT , SUM(QUANTITY*UNIT_PRICE) AS TOTAL_PRICE FROM SHOPPING_HISTORY GROUP BY 1 ;

---TASK 2---

CREATE OR REPLACE TABLE PHONES(
NAME VARCHAR(20) NOT NULL UNIQUE,
  PHONE_NUMBER NUMBER(10) NOT NULL UNIQUE
);

SELECT * FROM PHONES;

CREATE OR REPLACE TABLE CALLS(
ID NUMBER (10) NOT NULL unique,
CALLER VARCHAR(10) NOT NULL,
CALLIE VARCHAR(10) NOT NULL,
DURATION NUMBER(10) NOT NULL);

SELECT * FROM CALLS;

CREATE OR REPLACE VIEW CALL_1 AS SELECT distinct(CALLER) as PHONE , sum(DURATION) over (partition by CALLER )  AS TOTAL_TIME FROM CALLS  ;

CREATE OR REPLACE VIEW CALL_2 AS SELECT distinct(CALLIE) as PHONE , sum(DURATION) over (partition by CALLER )  AS TOTAL_TIME FROM CALLS  ;

CREATE OR REPLACE VIEW CALL_MORE_THAN_10MIN AS 
SELECT DISTINCT(PHONE) AS PHONE_NUMBER_10, SUM(TOTAL_TIME) OVER (PARTITION BY PHONE) AS PHONE_DURATION
FROM (SELECT * FROM CALL_1 UNION SELECT * FROM CALL_2) 
WHERE TOTAL_TIME > 10;

SELECT * FROM CALL_MORE_THAN_10MIN;

SELECT DISTINCT(PHONES.NAME) , DENSE_RANK () OVER (ORDER BY CALL_MORE_THAN_10MIN.PHONE_DURATION) FROM PHONES 
WHERE PHONE_NUMBER IN (SELECT PHONE_NUMBER_10 FROM CALL_MORE_THAN_10MIN ) GROUP BY NAME ;

CREATE OR REPLACE VIEW PHONES_VIEWS AS SELECT * FROM PHONES;

SELECT DISTINCT(PHONES_VIEWS.NAME) AS NAME FROM PHONES_VIEWS 
INNER JOIN 
CALL_MORE_THAN_10MIN ON PHONES_VIEWS.PHONE_NUMBER = CALL_MORE_THAN_10MIN.PHONE_NUMBER_10
WHERE PHONE_NUMBER IN (SELECT PHONE_NUMBER_10 FROM CALL_MORE_THAN_10MIN )  ;

---TASK 3---


CREATE OR REPLACE TABLE transactions(
amount INTEGER NOT NULL,
txn_date DATE NOT NULL);

INSERT INTO transactions
VALUES(1000,'2020-01-06'),
(-10,'2020-01-20'),
(-75,'2020-01-03'),
(-5,'2020-01-26'),
(-4,'2020-01-01'),
(2000,'2020-03-07'),
(-75,'2020-03-25'),
(-20,'2020-03-29'),
(40,'2020-03-29'),
(-50,'2020-03-29'),
(200,'2020-10-30'),
(-200,'2020-10-31');


SELECT MONTH(txn_date) as TXN_MONTH, sum(amount) OVER(PARTITION BY TXN_MONTH ) as TOTAL_TXN_PER_MONTH ,
CASE 
    WHEN COUNT(amount)OVER(PARTITION BY TXN_MONTH ) >= 3 AND 
    (SUM(amount)OVER(PARTITION BY TXN_MONTH )*-1)> 100 THEN 1 
    ELSE 0
END AS NO_FEE_MONTH
FROM transactions WHERE amount < 0 ;

SELECT SUM(amount) FROM transactions ;

CREATE OR REPLACE VIEW FEE_COUNT AS SELECT MONTH(txn_date) as TXN_MONTH, sum(amount) OVER(PARTITION BY TXN_MONTH ) as TOTAL_TXN_PER_MONTH ,
CASE 
    WHEN COUNT(amount)OVER(PARTITION BY TXN_MONTH ) >= 3 AND 
    (SUM(amount)OVER(PARTITION BY TXN_MONTH )*-1)> 100 THEN 1 
    ELSE 0
END AS NO_FEE_MONTH
FROM transactions WHERE amount < 0 ;

SELECT * FROM FEE_COUNT GROUP BY TXN_MONTH,TOTAL_TXN_PER_MONTH,NO_FEE_MONTH;

SELECT SUM(*) AS BALANCE FROM (SELECT (12-SUM(NO_FEE_MONTH))*-5 AS CREDIT_FEE FROM (SELECT * FROM FEE_COUNT GROUP BY TXN_MONTH,TOTAL_TXN_PER_MONTH,NO_FEE_MONTH)
UNION
SELECT SUM(amount) FROM transactions) ;